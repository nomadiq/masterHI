#!/usr/bin/env python3
from __future__ import print_function
import os.path
import argparse
import pickle
import math
import sys



parser = argparse.ArgumentParser(description='hmsIST NUS Processing Script Generator')


parser.add_argument('--conv', default=False, action='store_true')
parser.add_argument('--dir', default=False)
parser.add_argument('--nsamples', default=False)
parser.add_argument('--phasecheck', default=False, action='store_true')
parser.add_argument('--phase', default=False, action='store_true')
parser.add_argument('--EXT_L', default=False, action='store_true')
parser.add_argument('--EXT_R', default=False, action='store_true')
parser.add_argument('--EXT_x1', default=False)
parser.add_argument('--EXT_xn', default=False)
parser.add_argument('--noSOL', default=False, action='store_true')
parser.add_argument('--proc', default=False)
parser.add_argument('--itr', default=False)
parser.add_argument('--yN', default=False)
parser.add_argument('--autoN', default=False, action='store_true')
parser.add_argument('--recon', default=False, action='store_true')
parser.add_argument('--sthr', default=False)
parser.add_argument('--ethr', default=False)
parser.add_argument('--ft', default=False, action='store_true')
parser.add_argument('--xP0', default=False)
parser.add_argument('--yP0', default=False)
parser.add_argument('--xP1', default=False)
parser.add_argument('--yP1', default=False)
parser.add_argument('--clean', default=False, action='store_true')



args = parser.parse_args()


class Bruker2D(object):

    def __init__(self, data):
        self.ac1 = os.path.join(data, 'acqus')
        self.ac2 = os.path.join(data, 'acqu2s')
        self.ser = os.path.join(data, 'ser')
        self.pp = os.path.join(data, 'pulseprogram')
        self.ppc = os.path.join(data, 'pulseprogram.precomp')
        self.nuslist = os.path.join(data, 'nuslist')
        self.dir = data
        self.acqDict = {0: 'undefined', 1: 'qf', 2: 'qsec', 3: 'tppi', 4: 'states', 5: 'states-tppi', 6: 'echo-antiecho'}

        self.valid = bool(os.path.isfile(self.ac1) and 
                          os.path.isfile(self.ac2) and 
                          os.path.isfile(self.ser) and 
                          (os.path.isfile(self.pp) or os.path.isfile(self.ppc)) and 
                          os.path.isfile(self.nuslist)
                          )
        # sort out if pulseprogram or pulseprogram.precomp exists (or both I guess)
        if os.path.isfile(self.ppc) and not os.path.isfile(self.pp):
            #print('precomp exists, but pulseprogram does not')
            self.pp = self.ppc
        if self.valid:
            with open(self.pp) as fp:
                self.t2EA = any('Echo/Antiecho' in line and 't2' in line for line in fp)
        if self.valid:
            with open(self.ac1) as fp:
                self.grpdly = 0
                for line in fp:
                    if 'DTYPA' in line:
                        self.dtypa = int(line.split()[1])
                        if self.dtypa == 1:
                            self.datatypeconversion = '-noi2f'
                        elif self.dtypa == 2:
                            self.datatypeconversion = '-ws 8 -noi2f'
                        elif self.dtypa == 0:
                            self.datatypeconversion = ''
                        
                    if 'BYTORDA' in line:
                        byteorder = line.split()[-1]
                        if byteorder == '1':
                            self.byteorder = 'noaswap'
                        if byteorder == '0':
                            self.byteorder = 'aswap'
                    if 'DECIM' in line:
                        self.decim = line.split()[1]
                    if 'DSPFVS' in line:
                        self.dspfvs = line.split()[1]
                    if 'GRPDLY' in line:
                        self.grpdly = line.split()[1]
                    if '##$TD= ' in line:
                        self.td = line.split()[1]
                        self.xN = math.ceil(float(self.td) / 256) * 256
                    if '##$SW_h= ' in line:
                        self.xSW = line.split()[1]
                    if '##$SFO1= ' in line:
                        self.xOBS = line.split()[1]
                    if '##$O1= ' in line:
                        self.xO1 = line.split()[1]
                    if '##$BF1= ' in line:
                        self.xBF1 = line.split()[1]
                self.xT = str(int(self.td) // 2)
                self.xMODE = 'DQD'
                ratio = float(self.xBF1) / float(self.xOBS)
                if ratio > 0.9 and ratio < 1.1:
                    self.xLAB = 'H_x'
                elif ratio > 3.5 and ratio < 4.5:
                    self.xLAB = 'C_x'
                elif ratio > 9 and ratio < 11:
                    self.xLAB = 'N_x'
            with open(self.ac2) as fp:
                for line in fp:
                    if '##$SW_h= ' in line:
                        self.ySW = line.split()[1]
                    if '##$SFO1= ' in line:
                        self.yOBS = line.split()[1]
                    if '##$O1= ' in line:
                        self.yO1 = line.split()[1]
                    if '##$BF1= ' in line:
                        self.yBF1 = line.split()[1]
                    if '##$FnMODE= ' in line:
                        self.yACQ = line.split()[1]
                        self.yMODE = self.acqDict[int(self.yACQ)]
                
                ratio = float(self.xBF1) / float(self.yOBS)
                if ratio > 0.9 and ratio < 1.1:
                    self.yLAB = 'H_y'
                elif ratio > 3.5 and ratio < 4.5:
                    self.yLAB = 'C_y'
                elif ratio > 9 and ratio < 11:
                    self.yLAB = 'N_y'
            
            self.xCAR = float(self.xO1) / float(self.xBF1)
            self.yCAR = float(self.yO1) / float(self.yBF1)


    def genConversion(self, filename, ns=None):
        if self.valid == False:
            print('Data Directory does not seem to contain Bruker Data')
            return 1
        if ns is None:
            self.nsamples = sum(1 for _ in open(f'{self.dir}/nuslist'))
        else:
            self.nsamples = ns
        self.yconvN = self.nsamples
        script = ['#!/bin/csh', '# hmsIST conversion script for Bruker 3D Data', '', f'bruk2pipe -in {self.ser} \\', f'  -bad 0.0 -ext -{self.byteorder} -AMX -decim {self.decim} -dspfvs {self.dspfvs} -grpdly {self.grpdly}  {self.datatypeconversion}      \\', '  -xN {0: >16}   -yN {1: >16} \\'.format(self.xN, int(self.yconvN)*2), '  -xT {0: >16}   -yT {1: >16} \\'.format(self.xT, self.yconvN), '  -xMODE {0: >13}   -yMODE {1: >13} \\'.format(self.xMODE, self.yMODE), '  -xSW {0: >15}   -ySW {1: >15} \\'.format(round(float(self.xSW), 5), round(float(self.ySW), 5)), '  -xOBS {0: >14}   -yOBS {1: >14} \\'.format(round(float(self.xOBS), 5), round(float(self.yOBS), 5)), '  -xCAR {0: >14}   -yCAR {1: >14} \\'.format(round(float(self.xCAR), 5), round(float(self.yCAR), 5)), '  -xLAB {0: >14}   -yLAB {1: >14} \\'.format(self.xLAB, self.yLAB), '  -ndim              2   -aq2D        Complex                        \\', '| nmrPipe -out ./test.fid -ov -verb']

        with open(filename, 'w') as outfile:
            for item in script:
                outfile.write("%s\n" % item)

class Options(object):
    def __init__(self):
        self.dir = False
        self.phase0 = 0
        self.phase1 = 0
        self.nsamples = 0
        self.noEXT = True
        self.EXT_L = False
        self.EXT_R = False
        self.EXT_x1 = False
        self.EXT_xn = False
        self.noSOL = False
        self.itr = False
        self.autoN = False
        self.yN = False
        self.sthr = False
        self.ethr = False
        self.proc = False
        self.xP0 = False
        self.yP0 = False
        self.xP1 = False
        self.yP1 = False



if (os.path.isfile('.masterHI.config')):
    file = open('.masterHI.config','rb')
    savedargs = pickle.load(file)

else:
    savedargs = Options()



if args.conv: # requested a bruker to nmrpipe conversion

    if (args.dir):
        savedargs.dir = args.dir
    if (savedargs.dir):
        g = 1
    else:
        savedargs.dir = '.'


    data = Bruker2D(savedargs.dir)
    if args.nsamples:
        savedargs.nsamples = args.nsamples
        r = data.genConversion('convert.com', ns=int(savedargs.nsamples))
    else:
        r = data.genConversion('convert.com')

    if (r != 1):
        os.system('chmod 770 convert.com')
        print("Converting Bruker Data to nmrPipe Data Format (convert.com)")
        os.system('./convert.com')
        savedargs.beenConverted = True





if args.recon: # requested a reconstruction of the data

    data = Bruker2D(savedargs.dir)
    # savedargs.noEXT = args.noEXT
    if (args.nsamples):
        savedargs.nsamples = args.nsamples

    if (args.sthr and args.ethr):
        savedargs.sthr = args.sthr
        savedargs.ethr = args.ethr
    else:
        savedargs.sthr = 0.98
        savedargs.ethr = 0.98


    if (args.proc):
        savedargs.proc = args.proc
    if (args.itr):
        savedargs.itr = args.itr
    if args.yN:
        savedargs.yN = args.yN

    if (args.autoN):
        savedargs.autoN = args.autoN
        savedargs.xN = 0

    # --------------------------------------------------------------

    script = ['#!/bin/csh', 'nmrPipe -in test.fid \\']
    if not savedargs.noSOL:
        script.append('| nmrPipe -fn SOL \\')

    script.extend(('| nmrPipe  -fn SP -off 0.5 -end 0.98 -pow 2 -c 0.5 \\', '| nmrPipe  -fn ZF -auto                       \\', '| nmrPipe  -fn FT  -auto                           \\'))

    if args.xP0 and args.xP1:
        script.append(f'| nmrPipe  -fn PS -p0 {str(args.xP0)} -p1 {str(args.xP1)}' + ' -di              \\')

    elif args.xP0:
        script.append(f'| nmrPipe  -fn PS -p0 {str(args.xP0)}' + ' -p1 0.0 -di              \\')

    elif args.xP1:
        script.append(f'| nmrPipe  -fn PS -p0 0.0 -p1 {str(args.xP1)}' + ' -di              \\')

    else:
        script.append('| nmrPipe  -fn PS -p0 0.0 -p1 0.0 -di              \\')
    
    if args.EXT_L:
        script.append('| nmrPipe  -fn EXT -left -sw           \\')
    elif args.EXT_R:
        script.append('| nmrPipe  -fn EXT -right -sw          \\')
    elif args.EXT_x1:
        script.append(f'| nmrPipe  -fn EXT -x1 {args.EXT_x1}ppm -xn {args.EXT_xn}ppm -sw             \\')


    if args.yN:
        script.extend(('| nmrPipe  -fn TP \\', f'| hmsIST -xN {args.yN} -sched nuslist.used            \\', '| nmrPipe  -fn SP -off 0.5 -end 0.98 -pow 2 -c 0.5 \\', '| nmrPipe  -fn ZF -auto  \\', '| nmrPipe  -fn FT -verb                       \\'))
    else:
        script.extend(('| nmrPipe  -fn TP \\', f'| hmsIST -autoN 1 -sched nuslist.used            \\', '| nmrPipe  -fn SP -off 0.5 -end 0.98 -pow 2 -c 0.5 \\', '| nmrPipe  -fn ZF -auto  \\', '| nmrPipe  -fn FT -verb                       \\'))
    if args.yP0 and args.yP1:
        script.append(f'| nmrPipe  -fn PS -p0 {str(args.yP0)} -p1 {str(args.yP1)}' + ' -di              \\')

    elif args.yP0:
        script.append(f'| nmrPipe  -fn PS -p0 {str(args.yP0)}' + ' -p1 0.0 -di              \\')

    elif args.yP1:
        script.append(f'| nmrPipe  -fn PS -p0 0.0 -p1 {str(args.yP1)}' + ' -di              \\')

    else:
        script.append('| nmrPipe  -fn PS -p0 0.0 -p1 0.0 -di              \\')
    script.extend(('| nmrPipe  -fn POLY -auto -ord 1 \\', '| nmrPipe  -fn TP \\', '| nmrPipe  -fn POLY -auto -ord 1 \\', '> 2Dspectrum.dat'))


    with open('proc.com', 'w') as outfile:
        for item in script:
            outfile.write("%s\n" % item)
    os.system('chmod 770 proc.com')
    # --------------------------------------------------------------

    os.system(f'cp {str(data.nuslist)} nuslist.copy')
    with open('nuslist.copy') as f:
        content = f.readlines()
    if not (savedargs.nsamples):
        os.system('cp nuslist.copy nuslist.used')
    else:
        with open('nuslist.used', 'w') as outfile:
            for i in range(int(savedargs.nsamples)):
                outfile.write(f"{content[i]}")
    os.system('./proc.com')
    savedargs.beenReconed = True




if (args.clean):
    response = input("Are you sure you want to delete all processing files, except for the projections and the spectrum file/s? (Yes/No) ")
    if (response == 'Yes'):
        os.system('rm -rf data001.dat yzx yzx_ist fid rec/*.ft1')


file = open('.masterHI.config','wb')
pickle.dump(savedargs, file)
